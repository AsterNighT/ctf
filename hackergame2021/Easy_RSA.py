import math
import sympy
import gmpy2
from Crypto.Util.number import *

e = 65537
e_inv_to_pn = 3711280413091538961627975655441773002779051971944374941092919886404930776294379073449005090130295185733913204914385065484720308118297413172487453245411258502917494375102083107792469570980281493331580442200651661636867307121770096441551735483616154350624646115664426818811225663356484919693977425242351724187553239755648938824363599028099434485837144621654449409783379977371177841554961496614299080806413073100988432287550900098709630562054709368728832012053385104949960441517470524093772410138117712275273490906290085316675744779771373806478381660403445665384837820331677634351142536696516359308972945791178042876680820823520125133160365871984960832011094319724053511419746080830802780555233884815989859685886976028548210072972320168587187151640743454222189309888233473


def get_p():
    x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451
    y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439
    base = x-1  # since (x-1)! % x == -1 iff x is prime
    for i in range(y+1, x):
        # inv(i) == pow(i,x-2,x) since x is prime
        base = base * pow(i, x-2, x) % x
    # (math.factorial(y)) % x == base
    value_p = sympy.nextprime(base)  # Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征
    return value_p


def get_q():
    # value = [
    #     80096058210213458444437404275177554701604739094679033012396452382975889905967]
    # for i in range(1, 10):
    #     value.insert(0,sympy.prevprime(value[0]))
    # n = 1
    # pn = 1
    # for i in range(10):
    #     n = n * value[i]
    #     pn = pn * (value[i]-1)
    n = 10867044251308202525610429833378941885583537176540009852310190804902151205702577434876814846043178725637482883527673603637764201496309383861764748115067848380627043078909053950622380922407585155201088692482513179547331163967010957392158621557917006232652774410259541416698735300497474588305181676334861690965349549944477969856268151183764353142474736949982272081047041739624664203072771731432881990417735285809037023266963037247050071086078565909291860547856006944457070157547222661983336941836707190879843432217837536400708403513067521048536285889377452336976815252045750931010811632536664752565243025330731397400298864397103475579227000201070778961527428389040006666381646230946511838132105098726460463423306927084160893103685077757519364309180226769711338485612820819
    value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819
    q = pow(value_q, e_inv_to_pn, n)
    return sympy.nextprime(q)


# this destroyes the rsa cryptosystem
# p = get_p()
p = 10569944080090591401315432556965818857327680380269154543273468441025963038065648915158194147019839932524599260058098616377893091051396090650574162446875263
# q = get_q()
q = 10477925992460766451892208516181598312750484426056814542870756188277177949099084361476539803367804757559880919838828678145609717295215924948786830953571811

r = (p-1)*(q-1)

d = pow(e, -1, r)
# m = int.from_bytes(open("flag.txt", "rb").read(), "big")
# c = pow(m, e, p * q)
# print("c = ", c)
c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478

plain = pow(c, d, p*q)

for i in range(2, len(hex(plain)),2):
    print(chr(int(hex(plain)[i:i+2],16)),end='')
