from Crypto.Util.number import *
from secret import flag

flag1 = flag[:16]
flag2 = flag[16:32]
flag3 = flag[32:]

(p1,a1,b1) = (1383333670554863678551666822362196239242273588051, 299446119796668317821474260946629183722027371877, 722591700505463573820128374277044703680164144116)
E1 = EllipticCurve(GF(p1), [a1, b1])
assert E1.order() == p1

P1 = E1(221504092673696048756389221905190313468598958747, 1294055609263533522129037670663961210779668618001)
Q1 = bytes_to_long(flag1) * P1
print("Q1 =",Q1)


def add2(A, B, p):
    (u, v), (w, x) = A, B
    tmp = 3703296679
    assert u != w or v == x
    if u == w:
        m = (3*u*w + 6*tmp*u + 3*(tmp**2)) * inverse(v+x, p) % p
    else:
        m = (x-v) * inverse(w-u, p) % p
    y = m*m - u - w - 3*tmp
    z = m*(u-y) - v
    return y % p, z % p

def mul2(t, p, A, B):
    if t == 0:
        return B
    if t & 1 == 0:
        return mul2(t//2, p, add2(A, A, p), B)
    else:
        if B == 0:
            return mul2(t//2, p, add2(A, A, p), A)
        else:
            return mul2(t//2, p, add2(A, A, p), add2(B, A, p))

p2 = 1430713142868998353655213629157505619980590661013
P2 = (1430713142868998353655213629157505619976887364338, 1430713142868998353655213629157505619980590661005)
Q2 = mul2(bytes_to_long(flag2),p2,P2,0)
print("Q2 =",Q2)


p3 = 77103137342944625087689813967
E3 = EllipticCurve(GF(p3), [1,0])
P3 = E3(35918494029604741269165486995, 2587928336728112053842246345)
Q3 = bytes_to_long(flag3) * P3
print("Q3 =",Q3)

# Q1 = (551904316353996448232767105468524655074816725512 : 328919104033453656310428760774262418742438103547 : 1)
# Q2 = (1289003758451262829701971516408791055003461016142, 612906784441363867129513135019819348442466025756)
# Q3 = (1766945551360556875611781114 : 37984147318768365388049716288 : 1)

