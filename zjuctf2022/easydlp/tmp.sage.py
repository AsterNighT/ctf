

# This file was *autogenerated* from the file tmp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1383333670554863678551666822362196239242273588051 = Integer(1383333670554863678551666822362196239242273588051); _sage_const_299446119796668317821474260946629183722027371877 = Integer(299446119796668317821474260946629183722027371877); _sage_const_722591700505463573820128374277044703680164144116 = Integer(722591700505463573820128374277044703680164144116); _sage_const_221504092673696048756389221905190313468598958747 = Integer(221504092673696048756389221905190313468598958747); _sage_const_1294055609263533522129037670663961210779668618001 = Integer(1294055609263533522129037670663961210779668618001); _sage_const_551904316353996448232767105468524655074816725512 = Integer(551904316353996448232767105468524655074816725512); _sage_const_328919104033453656310428760774262418742438103547 = Integer(328919104033453656310428760774262418742438103547); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_40 = Integer(40); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16)
(p, A, B) = (_sage_const_1383333670554863678551666822362196239242273588051 ,
             _sage_const_299446119796668317821474260946629183722027371877 , _sage_const_722591700505463573820128374277044703680164144116 )
E = EllipticCurve(GF(p), [A, B])
assert E.order() == p
P = E(_sage_const_221504092673696048756389221905190313468598958747 ,
      _sage_const_1294055609263533522129037670663961210779668618001 )
Q = (_sage_const_551904316353996448232767105468524655074816725512 ,
     _sage_const_328919104033453656310428760774262418742438103547 )

xP = _sage_const_221504092673696048756389221905190313468598958747 
yP = _sage_const_1294055609263533522129037670663961210779668618001 
xQ = _sage_const_551904316353996448232767105468524655074816725512 
yQ = _sage_const_328919104033453656310428760774262418742438103547 

Qp = Qp(p, _sage_const_2 )
Ep = EllipticCurve(Qp, [A, B])

yPp = sqrt(Qp(xP) ** _sage_const_3  + Qp(A) * Qp(xP) + Qp(B))
Pp = Ep(Qp(xP), (-yPp, yPp)[yPp[_sage_const_0 ] == yP])

yQp = sqrt(Qp(xQ) ** _sage_const_3  + Qp(A) * Qp(xQ) + Qp(B))
Qp = Ep(Qp(xQ), (-yQp, yQp)[yQp[_sage_const_0 ] == yQ])

print('Pp = {}'.format(Pp))
print('Qp = {}'.format(Qp))
print('-' * _sage_const_40 )

lQ = Ep.formal_group().log()(- (p * Qp)[_sage_const_0 ] // (p * Qp)[_sage_const_1 ]) / p
print('log(Q) = {}'.format(lQ))
lP = Ep.formal_group().log()(- (p * Pp)[_sage_const_0 ] // (p * Pp)[_sage_const_1 ]) / p
print('log(P) = {}'.format(lP))
print('-' * _sage_const_40 )

e = lQ / lP
print('e = {}'.format(e))

assert e[_sage_const_0 ] * E(xP, yP) == E(xQ, yQ)

print(int.to_bytes(int(e[_sage_const_0 ]), _sage_const_16 , 'big'))

