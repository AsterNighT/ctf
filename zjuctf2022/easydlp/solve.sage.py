

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1383333670554863678551666822362196239242273588051 = Integer(1383333670554863678551666822362196239242273588051); _sage_const_299446119796668317821474260946629183722027371877 = Integer(299446119796668317821474260946629183722027371877); _sage_const_722591700505463573820128374277044703680164144116 = Integer(722591700505463573820128374277044703680164144116); _sage_const_221504092673696048756389221905190313468598958747 = Integer(221504092673696048756389221905190313468598958747); _sage_const_1294055609263533522129037670663961210779668618001 = Integer(1294055609263533522129037670663961210779668618001); _sage_const_551904316353996448232767105468524655074816725512 = Integer(551904316353996448232767105468524655074816725512); _sage_const_328919104033453656310428760774262418742438103547 = Integer(328919104033453656310428760774262418742438103547); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_40 = Integer(40); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16); _sage_const_3703296679 = Integer(3703296679); _sage_const_6 = Integer(6); _sage_const_1430713142868998353655213629157505619980590661013 = Integer(1430713142868998353655213629157505619980590661013); _sage_const_1430713142868998353655213629157505619976887364338 = Integer(1430713142868998353655213629157505619976887364338); _sage_const_1430713142868998353655213629157505619980590661005 = Integer(1430713142868998353655213629157505619980590661005); _sage_const_1289003758451262829701971516408791055003461016142 = Integer(1289003758451262829701971516408791055003461016142); _sage_const_612906784441363867129513135019819348442466025756 = Integer(612906784441363867129513135019819348442466025756); _sage_const_77103137342944625087689813967 = Integer(77103137342944625087689813967); _sage_const_35918494029604741269165486995 = Integer(35918494029604741269165486995); _sage_const_2587928336728112053842246345 = Integer(2587928336728112053842246345); _sage_const_1766945551360556875611781114 = Integer(1766945551360556875611781114); _sage_const_37984147318768365388049716288 = Integer(37984147318768365388049716288)
from Crypto.Util.number import *


def flag1():
    (p, A, B) = (_sage_const_1383333670554863678551666822362196239242273588051 ,
                 _sage_const_299446119796668317821474260946629183722027371877 , _sage_const_722591700505463573820128374277044703680164144116 )
    E = EllipticCurve(GF(p), [A, B])
    assert E.order() == p
    P = E(_sage_const_221504092673696048756389221905190313468598958747 ,
          _sage_const_1294055609263533522129037670663961210779668618001 )
    Q = (_sage_const_551904316353996448232767105468524655074816725512 ,
         _sage_const_328919104033453656310428760774262418742438103547 )

    xP = _sage_const_221504092673696048756389221905190313468598958747 
    yP = _sage_const_1294055609263533522129037670663961210779668618001 
    xQ = _sage_const_551904316353996448232767105468524655074816725512 
    yQ = _sage_const_328919104033453656310428760774262418742438103547 

    Qp = Qp(p, _sage_const_2 )
    Ep = EllipticCurve(Qp, [A, B])

    yPp = sqrt(Qp(xP) ** _sage_const_3  + Qp(A) * Qp(xP) + Qp(B))
    Pp = Ep(Qp(xP), (-yPp, yPp)[yPp[_sage_const_0 ] == yP])

    yQp = sqrt(Qp(xQ) ** _sage_const_3  + Qp(A) * Qp(xQ) + Qp(B))
    Qp = Ep(Qp(xQ), (-yQp, yQp)[yQp[_sage_const_0 ] == yQ])

    print('Pp = {}'.format(Pp))
    print('Qp = {}'.format(Qp))
    print('-' * _sage_const_40 )

    lQ = Ep.formal_group().log()(- (p * Qp)[_sage_const_0 ] // (p * Qp)[_sage_const_1 ]) / p
    print('log(Q) = {}'.format(lQ))
    lP = Ep.formal_group().log()(- (p * Pp)[_sage_const_0 ] // (p * Pp)[_sage_const_1 ]) / p
    print('log(P) = {}'.format(lP))
    print('-' * _sage_const_40 )

    e = lQ / lP
    print('e = {}'.format(e))

    assert e[_sage_const_0 ] * E(xP, yP) == E(xQ, yQ)

    return int.to_bytes(int(e[_sage_const_0 ]), _sage_const_16 , 'big')


def add2(A, B, p):  # curve add on y^2 = (x+tmp)^3+b
    (u, v), (w, x) = A, B
    tmp = _sage_const_3703296679 
    assert u != w or v == x
    if u == w:  # A==B
        m = (_sage_const_3 *u*w + _sage_const_6 *tmp*u + _sage_const_3 *(tmp**_sage_const_2 )) * inverse(v+x, p) % p  # 3(u+tmp)^2
    else:
        m = (x-v) * inverse(w-u, p) % p
    y = m*m - u - w - _sage_const_3 *tmp
    z = m*(u-y) - v
    return y % p, z % p


def mul2(t, p, A, B):
    if t == _sage_const_0 :
        return B
    if t & _sage_const_1  == _sage_const_0 :
        return mul2(t//_sage_const_2 , p, add2(A, A, p), B)
    else:
        if B == _sage_const_0 :
            return mul2(t//_sage_const_2 , p, add2(A, A, p), A)
        else:
            return mul2(t//_sage_const_2 , p, add2(A, A, p), add2(B, A, p))


def flag2():
    tmp = _sage_const_3703296679 
    p = _sage_const_1430713142868998353655213629157505619980590661013 
    # E = EllipticCurve(GF(p), [0, 0])
    P = (_sage_const_1430713142868998353655213629157505619976887364338 ,
         _sage_const_1430713142868998353655213629157505619980590661005 )
    P_shift = (_sage_const_1430713142868998353655213629157505619976887364338 +tmp,
               _sage_const_1430713142868998353655213629157505619980590661005 )
    Px = _sage_const_1430713142868998353655213629157505619976887364338 +tmp
    Py = _sage_const_1430713142868998353655213629157505619980590661005 
    Q = (_sage_const_1289003758451262829701971516408791055003461016142 ,
         _sage_const_612906784441363867129513135019819348442466025756 )
    Qx = _sage_const_1289003758451262829701971516408791055003461016142 +tmp
    Qy = _sage_const_612906784441363867129513135019819348442466025756 
    Q_shift = (_sage_const_1289003758451262829701971516408791055003461016142 +tmp,
               _sage_const_612906784441363867129513135019819348442466025756 )

    b = Qx * inverse(Qy, p) % p
    a = Px * inverse(Py, p) % p

    flag = b*inverse(a, p) % p

    print(int.to_bytes(int(flag), _sage_const_16 , 'big'))
    # Q = mul2(bytes_to_long(flag2), p, P, 0)
    # print("Q =", Q)


def flag3():
    p = _sage_const_77103137342944625087689813967 
    E = EllipticCurve(GF(p), [_sage_const_1 , _sage_const_0 ])  # y^2=x^3+x
    k = _sage_const_2   # min_k E.order() | (p^k-1)
    Fy = GF(p ** k, 'y')
    Ee = EllipticCurve(Fy, [_sage_const_1 , _sage_const_0 ])
    Pt = (_sage_const_35918494029604741269165486995 , _sage_const_2587928336728112053842246345 )
    Qt = (_sage_const_1766945551360556875611781114 , _sage_const_37984147318768365388049716288 )
    P = E(Pt)
    Q = E(Qt)
    Pe = Ee(Pt)
    Qe = Ee(Qt)


    R = Ee.random_point()
    m = R.order()
    d = gcd(m, P.order())
    T = (m//d)*R

    assert P.order()/T.order() in ZZ
    assert P.order() == T.order()

    n = P.order()
    a = Pe.weil_pairing(T, n)
    b = Qe.weil_pairing(T, n)
    flag = b.log(a)
    print(flag)


f1 = b'ZJUCTF{Master_11'
f2 = b'4514_0f_E1lipt1c'
f3 = b'_Curve_1919}'
print(f1+f2+f3)

